git init             	 把当前所在目录变成Git可以管理的仓库
git add <file>       	 添加文件到暂存区域
git commit -m "info" 	 将暂存区域的文件添加到当前分支 info为备注必须写
git log                  查看历史记录
git log --pretty=oneline 查看历史记录
git log --graph			 命令可以看到分支合并图。--abbrev-commit
git reset --hard HEAD^	 版本回退HEAD^上一个版本HEAD^^上两个版本
git reflog 				 用来记录每一次的命令
git reset --hard id		 根据版本id来回退可以在历史版本之间穿梭
git status 				 查看暂存区域的文件状态
git diff HEAD -- <files> 查看版本库最新版本和工作区版本文件的区别
git checkout -- <file>   撤销工作区的修改
git rm 					 用于删除一个文件如果一个文件已经被提交到版本库，那么你永远不用担心误删，
但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容
git remote add origin git@github.com:Git用户名/仓库名字.git 添加远程仓库
1git pull --rebase origin master
2git push -u origin master 	这是第一次上传把当前分支代码上传到master
git push origin master 第一次上传以后就可以用这个了
git clone git@github.com:Git用户名/仓库名字.git 下载远程仓库

git branch 查看分支
git branch <name> 创建分支
git checkout <name> 切换分支
git checkout -b <name> 创建且切换到新创建的分支中
git merge <name> 合并某分支到当前分支
git branch -d <name> 删除分支 强行删除，需要使用大写的-D参数
git merge --no-ff -m "merge with no-ff" dev 禁用Fast forward模式，在Fast forword这种模式下删除分支后，会丢掉分支的信息，
git stash把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash apply恢复，但是恢复后，stash内容并不删除
git stash drop来删除
git stash pop，恢复的同时把stash内容也删了
git stash list

git push origin <branch-name>推送自己的修改
git pull 如果推送失败，则因为远程分支比你的本地更新，需要先用试图合并
    如果合并有冲突，则解决冲突，并在本地提交；
    没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建
，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

    查看远程库信息，使用git remote -v；
    本地新建的分支如果不推送到远程，对其他人就是不可见的；
    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

    命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
    命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
    命令git tag可以查看所有标签。

    命令git push origin <tagname>可以推送一个本地标签；
    命令git push origin --tags可以推送全部未推送过的本地标签；
    命令git tag -d <tagname>可以删除一个本地标签；
    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

